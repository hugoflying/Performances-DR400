<!doctype html>
<html lang="fr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>DR400-120 – Calculateur de performances</title>
  <style>
    :root{
      --bg:#f6f7fb;--card:#fff;--ink:#0f172a;
      --muted:#6b7280;--ok:#16a34a;--warn:#f59e0b;--bad:#dc2626;
      --line:#e5e7eb;--primary:#2563eb;
    }
    *{box-sizing:border-box}
    html,body{margin:0;padding:0;background:var(--bg);color:var(--ink);font:16px/1.4 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue","Noto Sans",Arial;}
    h1{font-size:clamp(20px,3vw,28px);margin:0}
    h2{font-size:18px;margin:0 0 .6rem 0}
    .container{max-width:1200px;margin:0 auto;padding:16px}
    .row{display:grid;grid-template-columns:1fr;gap:16px}
    @media(min-width:1200px){.row{grid-template-columns:repeat(3,1fr)}}
    .card{background:var(--card);border:1px solid var(--line);border-radius:16px;padding:16px;box-shadow:0 2px 8px rgba(0,0,0,.04)}
    .btn{border:1px solid var(--line);background:#fff;padding:9px 12px;border-radius:12px;cursor:pointer}
    .btn.primary{background:var(--primary);border-color:var(--primary);color:#fff}
    .btn.toggle.on{background:var(--primary);color:#fff;border-color:var(--primary)}
    .btn:disabled{opacity:.6;cursor:not-allowed}
    label{display:block;font-size:12px;color:var(--muted)}
    input,select{width:100%;margin-top:6px;padding:10px;border-radius:12px;border:1px solid var(--line);background:#fff}
    .grid2{display:grid;grid-template-columns:1fr 1fr;gap:12px}
    .grid1{display:grid;grid-template-columns:1fr;gap:12px}
    .pill{display:inline-block;border:1px solid var(--line);border-radius:999px;padding:4px 10px;font-size:12px}
    .pill.ok{background:#dcfce7;border-color:#86efac;color:#14532d}
    .pill.warn{background:#fef3c7;border-color:#fcd34d;color:#7c2d12}
    .pill.bad{background:#fee2e2;border-color:#fca5a5;color:#7f1d1d}
    .field{border:1px solid var(--line);border-radius:12px;background:#f8fafc;padding:10px}
    .field .k{font-size:12px;color:var(--muted)}
    .field .v{margin-top:4px;font-weight:600}
    .field.highlight{background:#fff7ed}
    .field.strong .v{font-weight:800;font-size:18px}
    .header{display:flex;gap:12px;align-items:center;justify-content:space-between}
    .muted{color:var(--muted)}
    .badge{padding:6px 10px;border-radius:999px;border:1px solid var(--line);font-size:12px}
    .switch{display:flex;gap:8px}
    .switch .btn{padding:8px 10px}
    .footer{font-size:12px;color:var(--muted);margin-top:18px}
    .chips{display:flex;gap:8px;flex-wrap:wrap}
    .hidden{display:none}
    /* Impr. */
    @media print{
      .no-print{display:none !important}
      body{background:#fff}
      .container{max-width:none;padding:0}
      .card{box-shadow:none}
    }
  </style>
</head>
<body>
<div class="container">
  <div class="header">
    <h1>DR400-120 · Calculateur de performances</h1>
    <div class="chips no-print">
      <button id="importCsvBtn" class="btn">Importer CSV terrains</button>
      <input id="csvInput" type="file" accept=".csv" class="hidden" />
      <button class="btn primary" onclick="window.print()">Imprimer</button>
    </div>
  </div>

  <div class="row" style="margin-top:12px">
    <!-- Terrain / Piste -->
    <section class="card">
      <h2>Terrain / Piste</h2>
      <div id="csvSelectWrap" class="grid1" style="margin-bottom:8px; display:none">
        <label>Fiche de terrain importée
          <select id="csvSelect"></select>
        </label>
      </div>
      <div class="grid2">
        <label>ICAO
          <input id="icao" />
        </label>
        <label>QFU (°)
          <input id="qfu" type="number" value="0"/>
        </label>
        <label>TODA (m)
          <input id="toda" type="number" value="0"/>
        </label>
        <label>LDA (m)
          <input id="lda" type="number" value="0"/>
        </label>
        <div class="grid1">
          <label>Surface piste</label>
          <div class="switch">
            <button id="surfHard" class="btn toggle on">Dur</button>
            <button id="surfGrass" class="btn toggle">Herbe</button>
          </div>
        </div>
      </div>
    </section>

    <!-- Conditions -->
    <section class="card">
      <h2>Conditions</h2>
      <div class="grid2">
        <label>Élévation (ft)
          <input id="alt" type="number" value="0"/>
        </label>
        <label>OAT (°C)
          <input id="oat" type="number" value="15"/>
        </label>
        <div class="grid2">
          <label>Vent — Direction (°)
            <input id="windDir" type="number" value="0"/>
          </label>
          <label>Vent — Vitesse (kt)
            <input id="windKt" type="number" value="0"/>
          </label>
        </div>
        <div class="field" style="grid-column:1/-1">
          <div class="k">Composantes vent</div>
          <div class="v"><span id="hwText">0</span> kt face · <span id="xwText">0</span> kt travers · <span id="tailWarn" class="muted"></span></div>
        </div>
      </div>
      <div class="grid2" style="margin-top:10px">
        <label>Facteur suppl. décollage
          <input id="extraTO" type="number" step="0.01" value="1.00"/>
        </label>
        <label>Facteur suppl. atterrissage
          <input id="extraLDG" type="number" step="0.01" value="1.00"/>
        </label>
        <label>Marge sécurité (%)
          <input id="safety" type="number" value="30"/>
        </label>
        <label style="display:flex;align-items:center;gap:8px;margin-top:26px">
          <input id="noSpats" type="checkbox"/> Sans carénages de roues (TO +3%)
        </label>
      </div>
    </section>

    <!-- Masses -->
    <section class="card">
      <h2>Masses & Atterrissage</h2>
      <div class="grid2">
        <label>Masse décollage (kg)
          <input id="tow" type="number" value="900"/>
        </label>
        <label>Masse atterrissage (kg)
          <input id="ldw" type="number" value="900"/>
        </label>
      </div>
      <div class="grid1" style="margin-top:10px">
        <label>Atterrissage — mode</label>
        <div class="switch">
          <button id="ldgModerate" class="btn toggle on">Freinage modéré (dur/herbe)</button>
          <button id="ldgNoBrake" class="btn toggle">Sans frein sur herbe</button>
        </div>
      </div>
      <div class="muted" style="margin-top:10px">ISA terrain estimée : <span id="isaText">15.0</span>°C</div>
    </section>
  </div>

  <!-- Résultats -->
  <section class="row" style="margin-top:16px">
    <div class="card">
      <div class="header">
        <h2>Décollage (15 m)</h2>
        <span id="toBadge" class="pill">—</span>
      </div>
      <div class="grid2" style="margin-top:8px">
        <div class="field"><div class="k">Base (manuel)</div><div id="toBase" class="v">—</div></div>
        <div class="field"><div class="k">Facteur vent</div><div id="toWindF" class="v">—</div></div>
        <div class="field"><div class="k">Carénages</div><div id="toSpat" class="v">—</div></div>
        <div class="field"><div class="k">Facteur supplémentaire</div><div id="toExtra" class="v">—</div></div>
        <div class="field highlight"><div class="k">Résultat</div><div id="toRes" class="v">—</div></div>
        <div class="field strong"><div class="k">+ Marge</div><div id="toResM" class="v">—</div></div>
        <div class="field"><div class="k">TODA dispo</div><div id="todaShow" class="v">—</div></div>
      </div>
      <div id="tailMsg" class="muted" style="margin-top:8px"></div>
    </div>

    <div class="card">
      <div class="header">
        <h2>Atterrissage (15 m → arrêt)</h2>
        <span id="ldgBadge" class="pill">—</span>
      </div>
      <div class="grid2" style="margin-top:8px">
        <div class="field"><div class="k">Base (manuel)</div><div id="ldgBase" class="v">—</div></div>
        <div class="field"><div class="k">Facteur vent</div><div id="ldgWindF" class="v">—</div></div>
        <div class="field"><div class="k">Facteur supplémentaire</div><div id="ldgExtra" class="v">—</div></div>
        <div class="field highlight"><div class="k">Résultat</div><div id="ldgRes" class="v">—</div></div>
        <div class="field strong"><div class="k">+ Marge</div><div id="ldgResM" class="v">—</div></div>
        <div class="field"><div class="k">LDA dispo</div><div id="ldaShow" class="v">—</div></div>
      </div>
    </div>
  </section>

  <div class="footer">
    Sources : Manuel de vol DR400-120 (perf. décollage/atterrissage, vent nul) · Facteurs vent du manuel (0/10/20/30 kt). Bulletin ROBIN « Vol sans carénages de roues » : +3 % sur distance décollage (seulement).
  </div>
</div>

<script>
  // ---------------- Données des tableaux (ignorer valeurs entre parenthèses) ----------------
  const TO_TABLE = {
    0:   { temps:{minus20:-20, isa:15,  plus20:35},  hard:{kg700:[285,315,345], kg900:[480,535,590]}, grass:{kg700:[320,355,395], kg900:[570,640,715]} },
    4000:{ temps:{minus20:-13, isa:7,   plus20:27},  hard:{kg700:[375,415,460], kg900:[645,720,800]}, grass:{kg700:[430,485,540], kg900:[800,905,1025]} },
    8000:{ temps:{minus20:-21, isa:-1,  plus20:19},  hard:{kg700:[500,560,620], kg900:[890,1000,1125]},grass:{kg700:[595,675,760],kg900:[1165,1350,1550]} }
  };
  const LDG_TABLE = {
    0:   { temps:{minus20:-20, isa:15,  plus20:35},  moderate:{kg700:[365,385,400], kg900:[435,460,485]}, nobrake_grass:{kg700:[435,460,485], kg900:[530,560,590]} },
    4000:{ temps:{minus20:-13, isa:7,   plus20:27},  moderate:{kg700:[395,420,440], kg900:[475,505,535]}, nobrake_grass:{kg700:[475,505,530], kg900:[580,615,655]} },
    8000:{ temps:{minus20:-21, isa:-1,  plus20:19},  moderate:{kg700:[430,460,485], kg900:[525,555,590]}, nobrake_grass:{kg700:[525,555,590], kg900:[640,680,725]} }
  };

  // ---------------- Utilitaires ----------------
  const $ = s => document.querySelector(s);
  const clamp = (v,min,max)=>Math.max(min,Math.min(max,v));
  const lerp = (x0,y0,x1,y1,x)=> y0 + (y1-y0)*((x-x0)/(x1-x0||1));
  const isaAt = altFt => 15 - 2*(altFt/1000);

  function interpTempForAltitude(rowTemps, arr, oat){
    const xs=[rowTemps.minus20,rowTemps.isa,rowTemps.plus20], ys=arr;
    if(oat<=xs[0]) return ys[0];
    if(oat>=xs[2]) return ys[2];
    if(oat<=xs[1]) return lerp(xs[0],ys[0],xs[1],ys[1],oat);
    return lerp(xs[1],ys[1],xs[2],ys[2],oat);
  }
  function interpTO(altFt,oat,massKg,surface){
    const low = altFt<=0?0:altFt>=8000?8000:(altFt<=4000?0:4000);
    const high= altFt<=0?0:altFt>=8000?8000:(altFt<=4000?4000:8000);
    const alpha = clamp((massKg-700)/(900-700),0,1);
    const valAt = (alt)=>{
      const t=TO_TABLE[alt];
      const v700 = interpTempForAltitude(t.temps, t[surface].kg700, oat);
      const v900 = interpTempForAltitude(t.temps, t[surface].kg900, oat);
      return lerp(0,v700,1,v900,alpha);
    };
    if(low===high) return valAt(low);
    return lerp(low,valAt(low),high,valAt(high),altFt);
  }
  function interpLDG(altFt,oat,massKg,mode){
    const low = altFt<=0?0:altFt>=8000?8000:(altFt<=4000?0:4000);
    const high= altFt<=0?0:altFt>=8000?8000:(altFt<=4000?4000:8000);
    const alpha = clamp((massKg-700)/(900-700),0,1);
    const valAt = (alt)=>{
      const t=LDG_TABLE[alt];
      const v700 = interpTempForAltitude(t.temps, t[mode].kg700, oat);
      const v900 = interpTempForAltitude(t.temps, t[mode].kg900, oat);
      return lerp(0,v700,1,v900,alpha);
    };
    if(low===high) return valAt(low);
    return lerp(low,valAt(low),high,valAt(high),altFt);
  }
  function windComponents(qfu, windDir, windKt){
    const diff = ((windDir - qfu + 540) % 360) - 180; // [-180,180]
    const rad = diff * Math.PI/180;
    return { headwind: windKt*Math.cos(rad), crosswind: windKt*Math.sin(rad) };
  }
  function headwindFactor(hw){
    const pts=[{x:0,y:1.00},{x:10,y:0.78},{x:20,y:0.63},{x:30,y:0.52}];
    const x=clamp(hw,0,30);
    if(x===0) return 1;
    for(let i=0;i<pts.length-1;i++){
      const p0=pts[i], p1=pts[i+1];
      if(x>=p0.x && x<=p1.x) return lerp(p0.x,p0.y,p1.x,p1.y,x);
    }
    return pts.at(-1).y;
  }
  function status(val,limit){
    if(!limit) return 'neutral';
    if(val<=limit) return 'ok';
    if(val<=limit*1.1) return 'warn';
    return 'bad';
  }

  // ---------------- État & UI ----------------
  let surface='hard';
  let landingMode='moderate';

  const inputs = [
    'qfu','toda','lda','alt','oat','windDir','windKt',
    'extraTO','extraLDG','safety','tow','ldw','noSpats','icao'
  ];
  inputs.forEach(id=>{
    const el = $('#'+id);
    el.addEventListener(id==='noSpats'?'change':'input', compute);
  });

  // Toggles
  $('#surfHard').onclick=()=>{surface='hard';$('#surfHard').classList.add('on');$('#surfGrass').classList.remove('on');compute()};
  $('#surfGrass').onclick=()=>{surface='grass';$('#surfGrass').classList.add('on');$('#surfHard').classList.remove('on');compute()};
  $('#ldgModerate').onclick=()=>{landingMode='moderate';$('#ldgModerate').classList.add('on');$('#ldgNoBrake').classList.remove('on');compute()};
  $('#ldgNoBrake').onclick=()=>{landingMode='nobrake_grass';$('#ldgNoBrake').classList.add('on');$('#ldgModerate').classList.remove('on');compute()};

  // CSV import
  const csvBtn = $('#importCsvBtn'), csvInput=$('#csvInput'), csvSelect=$('#csvSelect'), csvWrap=$('#csvSelectWrap');
  let csvRows=[];
  csvBtn.onclick = ()=>csvInput.click();
  csvInput.onchange = e=>{
    const f=e.target.files?.[0]; if(!f) return;
    const r=new FileReader();
    r.onload=()=>{
      try{
        const rows=parseCSV(String(r.result));
        csvRows=rows; csvSelect.innerHTML='';
        rows.forEach((r,i)=>{
          const opt=document.createElement('option');
          opt.value=i;
          opt.textContent=`${r.ICAO||r.icao||'?'} · ${r.Piste||r.piste||r.runway||'?'} · QFU ${r.QFU||r.qfu||'?'} · TODA ${r.TODA||r.toda||'?'} · LDA ${r.LDA||r.lda||'?'}`
          csvSelect.appendChild(opt);
        });
        csvWrap.style.display='grid';
        csvSelect.onchange=applyCsvRow;
        csvSelect.value='0'; applyCsvRow();
      }catch(err){ alert('CSV invalide'); }
    };
    r.readAsText(f);
  };
  function applyCsvRow(){
    const r = csvRows[Number(csvSelect.value)]||{};
    $('#icao').value = (r.ICAO||r.icao||'').toUpperCase();
    $('#qfu').value  = Number(r.QFU||r.qfu||0);
    $('#toda').value = Number(r.TODA||r.toda||0);
    $('#lda').value  = Number(r.LDA||r.lda||0);
    const s = String(r.type||r.TYPE||r.Surface||'').toLowerCase();
    if(s.includes('herbe')||s.includes('grass')) $('#surfGrass').click(); else $('#surfHard').click();
    compute();
  }
  function parseCSV(text){
    const sep = text.includes(';') ? ';' : ',';
    const [header,...lines]=text.split(/\r?\n/).filter(Boolean);
    const cols=header.split(sep).map(s=>s.trim());
    return lines.map(l=>{
      const vals=l.split(sep).map(s=>s.trim());
      const obj={}; cols.forEach((c,i)=>obj[c]=vals[i]); return obj;
    });
  }

  function setBadge(el, state){
    el.className='pill';
    if(state==='ok') el.classList.add('ok');
    else if(state==='warn') el.classList.add('warn');
    else if(state==='bad') el.classList.add('bad');
    el.textContent = state==='ok'?'OK':state==='warn'?'LIMITE':state==='bad'?'KO':'—';
  }

  function compute(){
    const qfu = Number($('#qfu').value||0);
    const toda = Number($('#toda').value||0);
    const lda  = Number($('#lda').value||0);
    const alt  = Number($('#alt').value||0);
    const oat  = Number($('#oat').value||0);
    const wdir = Number($('#windDir').value||0);
    const wkt  = Number($('#windKt').value||0);
    const extraTO= Number($('#extraTO').value||1);
    const extraLDG= Number($('#extraLDG').value||1);
    const safety = Number($('#safety').value||30);
    const tow   = Number($('#tow').value||900);
    const ldw   = Number($('#ldw').value||900);
    const noSpats = $('#noSpats').checked;

    // ISA text
    $('#isaText').textContent = isaAt(alt).toFixed(1);

    // Vent
    const comp = windComponents(qfu,wdir,wkt);
    const hw = Math.max(0, comp.headwind);
    const xw = Math.abs(comp.crosswind);
    $('#hwText').textContent = hw.toFixed(0);
    $('#xwText').textContent = xw.toFixed(0);
    $('#tailWarn').textContent = comp.headwind < 0 ? '(vent arrière détecté)' : '';
    $('#tailMsg').textContent = comp.headwind < 0 ? 'Vent arrière : le manuel ne fournit pas de facteur → résultat décollage non valide.' : '';

    // Interpolations
    const baseTO  = interpTO(alt, oat, tow, surface);
    const baseLDG = interpLDG(alt, oat, ldw, landingMode);

    const windF = headwindFactor(hw);
    const spatF = noSpats ? 1.03 : 1.00;

    const toCalc = Math.round(baseTO * windF * extraTO * spatF);
    const ldgCalc = Math.round(baseLDG * windF * extraLDG);

    const toMargin  = Math.round(toCalc  * (1 + safety/100));
    const ldgMargin = Math.round(ldgCalc * (1 + safety/100));

    // UI
    $('#toBase').textContent = Math.round(baseTO)+' m';
    $('#toWindF').textContent = windF.toFixed(2)+'×';
    $('#toSpat').textContent = (spatF.toFixed(2)+'×') + (noSpats?' (sans carénages)':' (carénages présents)');
    $('#toExtra').textContent = extraTO.toFixed(2)+'×';
    $('#toRes').textContent = toCalc+' m';
    $('#toResM').textContent = toMargin+' m';
    $('#todaShow').textContent = toda? (toda+' m') : '—';

    $('#ldgBase').textContent = Math.round(baseLDG)+' m';
    $('#ldgWindF').textContent = windF.toFixed(2)+'×';
    $('#ldgExtra').textContent = extraLDG.toFixed(2)+'×';
    $('#ldgRes').textContent = ldgCalc+' m';
    $('#ldgResM').textContent = ldgMargin+' m';
    $('#ldaShow').textContent = lda? (lda+' m') : '—';

    setBadge($('#toBadge'), status(toMargin, toda));
    setBadge($('#ldgBadge'), status(ldgMargin, lda));
  }

  // Initial compute
  compute();
</script>
</body>
</html>
